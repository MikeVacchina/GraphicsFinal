// Light struct with required light parameters
struct Light
{
	vec3 position;
	vec3 color;
	vec3 direction;
	float fov;
	int on;
};

// Vertex position, color, and normal passed in to the vertex shader
attribute vec3 v_position;
attribute vec3 v_color;
attribute vec3 v_norm;

// Color output that goes to the fragment shader
varying vec4 color;

// Object material parameters that effects how light interacts with the object
uniform vec4 DP, SP;
uniform float shininess;

// For lighting everything needs to be in the eye coordinate system
// As such we divide up the MVP matrix into MV and P
// MV puts the objects into the camera (eye or view) coordinate system
uniform mat4 ModelView;
uniform mat4 Projection;

// The lights themselves
uniform Light spotLight;
uniform Light pointLight;
uniform Light distantLight;
uniform Light ambientLight;

void main(void)
{	
	// Get the pos of the vertex in camera's coordinate system
	vec4 pos = (ModelView * vec4(v_position.xyz, 1.0));
	
	// Get values for Phong model that are consistant for all light types
	vec3 N = normalize( (ModelView * vec4(v_norm, 0.0)).xyz );
	vec3 E = normalize(-pos.xyz);
	
	vec4 sl_color = vec4(0.0,0.0,0.0,1.0);
	vec4 pl_color = vec4(0.0,0.0,0.0,1.0);
	vec4 dl_color = vec4(0.0,0.0,0.0,1.0);
	vec4 al_color = vec4(0.0,0.0,0.0,1.0);
	
	// Apply spot light
	if(spotLight.on==1)
	{	
		// Get a vector that points from the light's position to the vertex
		vec3 o_direction = normalize(pos.xyz - spotLight.position);
		// Get a vector that points in the direction that the light is facing
		vec3 l_direction = normalize(spotLight.direction);
		
		// Get the angle between the two vectors above
		float theda = acos(dot(o_direction,l_direction));
		
		// Determine if the vertex is in the field of view of the spot light
		if(theda < spotLight.fov)
		{
			//Apply phong model lighting to the vertex
			vec3 L = normalize(spotLight.position.xyz - pos.xyz);
			vec3 H = normalize(L+E);
			
			float Kd = max(dot(L,N),0.0);
			
			vec4 diffuse = Kd * DP;
			
			float Ks = pow(max(dot(N,H),0.0),shininess);
			
			vec4 specular = Ks * SP;
			
			if(dot(L,N) < 0.0) 
				specular = vec4(0.0,0.0,0.0,1.0);

			// Combine the diffuse and specular lighting with the color emitted by the light
			sl_color = vec4(spotLight.color.xyz,1.0)*(diffuse + specular);
		}
	}
	// Apply point light
	if(pointLight.on==1)
	{	
		// Apply phong model lighting to the vertex
		vec3 L = normalize(pointLight.position.xyz - pos.xyz);
		vec3 H = normalize(L+E);
		
		float Kd = max(dot(L,N),0.0);
		
		vec4 diffuse = Kd * DP;
		
		float Ks = pow(max(dot(N,H),0.0),shininess);
		
		vec4 specular = Ks * SP;
		
		if(dot(L,N) < 0.0) 
			specular = vec4(0.0,0.0,0.0,1.0);

		// Combine the diffuse and specular lighting with the color emitted by the light
		pl_color = vec4(pointLight.color.xyz,1.0)*(diffuse + specular);
	}
	// Apply distant light
	if(distantLight.on==1)
	{
		// Apply phong model lighting to the vertex
		// Since distant light does not have position vector to it is always the same
		// Thus the vector that points toward the light is just the negative of the direction the light is pointing
		vec3 L = normalize(-distantLight.direction.xyz);
		vec3 H = normalize(L+E);
		
		float Kd = max(dot(L,N),0.0);
		
		vec4 diffuse = Kd * DP;
		
		float Ks = pow(max(dot(N,H),0.0),shininess);
		
		vec4 specular = Ks * SP;
		
		if(dot(L,N) < 0.0) 
			specular = vec4(0.0,0.0,0.0,1.0);

		// Combine the diffuse and specular lighting with the color emitted by the light
		dl_color = vec4(distantLight.color.xyz,1.0)*(diffuse + specular);
	}
	// Apply ambient light
	if(ambientLight.on==1)
	{
		// Copy the ambient light color
		al_color = vec4(ambientLight.color.xyz,1.0);
	}
	
	// Combine the color of the vertex with the colors emitted by the lights
	color = vec4(v_color.xyz,1.0)*(sl_color+pl_color+dl_color+al_color);
		
	// Finish putting the vertex position in the required coordinate system
	gl_Position = Projection * pos;
}