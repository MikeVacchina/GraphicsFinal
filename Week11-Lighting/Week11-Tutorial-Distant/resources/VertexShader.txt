// For a distant light the properties needed are color and direction
// The color is directly applied to the objects.
// The direction is the direction that the light points. All of the light 
//    from that light travels parallel so all objects will receive the light 
//    from the same direction no matter were they are.
struct Light
{
	vec3 color;
	vec3 direction;
};

//  Vertex position, color and normal passed in to the vertex shader.
attribute vec3 v_position;
attribute vec3 v_color;
attribute vec3 v_norm;

// Color output that goes to the fragment shader.
varying vec4 color;

// Object material parameters that effects how light interacts with the object.
uniform vec4 DP, SP;
uniform float shininess;

// For lighting everything needs to be in the eye coordinate system
// As such we divide up the MVP matrix into MV and P
// MV puts the objects into the camera (eye or view) coordinate system
uniform mat4 ModelView;
uniform mat4 Projection;

// The light itself
uniform Light distantLight;

void main(void)
{
	// Get the pos of the vertex in camera's coordinate system	
	vec4 pos = (ModelView * vec4(v_position.xyz, 1.0));
	
	// Get the normal of the vertex in camera's coordinate system
	vec3 N = normalize( (ModelView * vec4(v_norm, 0.0)).xyz );
	
	// Apply Phong Model lighting to the vertex
	vec3 L = normalize(-distantLight.direction.xyz);
	vec3 E = normalize(-pos.xyz);
	vec3 H = normalize(L+E);
	
	float Kd = max(dot(L,N),0.0);
	
	vec4 diffuse = Kd * DP;
	
	float Ks = pow(max(dot(N,H),0.0),shininess);
	
	vec4 specular = Ks * SP;
	
	if(dot(L,N) < 0.0) 
		specular = vec4(0.0,0.0,0.0,1.0);

	// Combines the diffuse and specular lighting with the color emitted by the light and the color of the vertex
	color = vec4(v_color.xyz,1.0)*vec4(distantLight.color.xyz,1.0)*(diffuse + specular);
	
	// Finish putting the vertex position in the required coordinate system
	gl_Position = Projection * pos;
}