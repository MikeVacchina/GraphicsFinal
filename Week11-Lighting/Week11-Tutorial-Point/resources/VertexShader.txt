struct Light
{
	vec3 position;
	vec3 color;
	vec3 direction;
	float falloff;
};

attribute vec3 v_position;
attribute vec3 v_color;
attribute vec3 v_norm;

varying vec4 color;

uniform vec4 DP, SP;
uniform float shininess;

uniform mat4 ModelView;
uniform mat4 Projection;

uniform Light pointLight;

void main(void)
{	
	vec4 pos = (ModelView * vec4(v_position.xyz, 1.0));
	
	vec3 N = normalize( (ModelView * vec4(v_norm, 0.0)).xyz );
	
	vec3 L = normalize(pointLight.position.xyz - pos.xyz);
	vec3 E = normalize(-pos.xyz);
	vec3 H = normalize(L+E);
	
	float Kd = max(dot(L,N),0.0);
	
	vec4 diffuse = Kd * DP;
	
	float Ks = pow(max(dot(N,H),0.0),shininess);
	
	vec4 specular = Ks * SP;
	
	if(dot(L,N) < 0.0) 
		specular = vec4(0.0,0.0,0.0,1.0);

	color = vec4(v_color.xyz,1.0)*vec4(pointLight.color.xyz,1.0)*(diffuse + specular);
	
	gl_Position = Projection * pos;
}